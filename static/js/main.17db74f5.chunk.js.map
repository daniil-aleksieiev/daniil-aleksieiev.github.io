{"version":3,"sources":["components/AnimatedCore/index.js","components/AnimatedCore/AnimatedCore.js","components/FeedbackForm/index.js","components/FeedbackForm/FeedbackForm.js","components/SocialLinks/index.js","components/SocialLinks/SocialLinks.js","pages/Home.js","pages/Contacts.js","components/App/index.js","components/App/App.js","routes.js","serviceWorker.js","index.js"],"names":["AnimatedCore","className","FeedbackForm","props","state","validated","status","email_format","handleSubmit","bind","emailFormat","event","preventDefault","test","target","value","this","setState","form","data","FormData","xhr","XMLHttpRequest","checkValidity","stopPropagation","open","method","action","setRequestHeader","onreadystatechange","readyState","DONE","setTimeout","reset","send","modalIsOpen","setModal","noValidate","onSubmit","e","type","name","id","placeholder","required","onChange","maxLength","onClick","Component","SocialLinks","useState","href","rel","icon","faLinkedinIn","faTelegramPlane","faEnvelope","faDownload","isOpen","onRequestClose","contentLabel","ariaHideApp","faTimes","HomePage","Date","getFullYear","ContactsPage","App","routes","path","exact","Home","Contacts","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17db74f5.chunk.js","sourcesContent":["import AnimatedCore from './AnimatedCore';\n\nexport default AnimatedCore;\n","import React from 'react';\n\nimport './AnimatedCore.scss';\n\nconst AnimatedCore = () => (\n  <div className=\"animated-core\">\n    <div className=\"circle\"/>\n    <div className=\"circle\"/>\n    <div className=\"circle\"/>\n    <div className=\"circle\"/>\n    <div className=\"circle\"/>\n    <div className=\"circle\"/>\n  </div>\n);\n\nexport default AnimatedCore;\n","import FeedbackForm from './FeedbackForm';\n\nexport default FeedbackForm;\n","import React, { Component } from 'react';\n\nimport './FeedbackForm.scss';\n\nexport default class FeedbackForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      validated: false,\n      status: '',\n      email_format: true\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.emailFormat = this.emailFormat.bind(this);\n  }\n\n  emailFormat(event) {\n    event.preventDefault();\n    const filter = /^([a-zA-Z0-9_.])+@(([a-zA-Z0-9])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    filter.test(event.target.value)\n      ? this.setState({ email_format: true })\n      : this.setState({ email_format: false })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      xhr.open(form.method, form.action);\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState !== XMLHttpRequest.DONE) return;\n        if (xhr.status === 200) {\n          this.setState({ status: 'SUCCESS' });\n          setTimeout(() => {\n            this.setState({ status: '', validated: false });\n            form.reset();\n          }, 2000);\n        } else {\n          this.setState({ status: 'ERROR' });\n        }\n      };\n      xhr.send(data);\n    }\n    this.setState({ validated: true });\n  }\n\n  render () {\n    const { modalIsOpen, setModal } = this.props;\n    const { validated, status, email_format } = this.state;\n\n    return (\n      <>\n        <form\n          noValidate\n          action=\"https://formspree.io/meqgdgdj\"\n          onSubmit={e => this.handleSubmit(e)}\n          method=\"POST\"\n          className={`form ${validated ? 'validated' : ''}`}\n        >\n\n          <div className=\"form-group\">\n            <h3 className=\"h3\">Send request</h3>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              placeholder=\"Your Name\"\n              required\n            />\n            <span className=\"invalid-message\">Name is required</span>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Your Email\"\n              onChange={e => this.emailFormat(e)}\n              required\n            />\n            <span className=\"invalid-message\">Email is required</span>\n            {\n              !email_format && <span className=\"invalid-format-message\">Invalid Format</span>\n            }\n          </div>\n\n          <div className=\"form-group\">\n            <textarea\n              name=\"message\"\n              id=\"message\"\n              placeholder=\"Your message\"\n              maxLength=\"200\"\n              required\n            />\n            <span className=\"invalid-message\">Message is required</span>\n          </div>\n\n          <div className=\"form-group\">\n            <button type=\"submit\" className=\"btn\">\n              {status === 'SUCCESS' ? 'Sending...' : 'Submit'}\n            </button>\n          </div>\n\n        </form>\n        {\n          status === 'SUCCESS' && (\n            <div className=\"success-message\">\n              <h2 className=\"h2\">Thanks for contacting me!</h2>\n              <h4 className=\"h4\">Will get in touch with you shortly</h4>\n              <span className=\"close-btn--success\" onClick={() => {setModal(!modalIsOpen)}}>Close Modal</span>\n            </div>\n          )\n        }\n      </>\n    )\n  }\n\n}\n","import SocialLinks from './SocialLinks';\n\nexport default SocialLinks;\n","import React, { useState } from 'react';\nimport Modal from 'react-modal';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedinIn, faTelegramPlane } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope, faTimes, faDownload } from '@fortawesome/free-solid-svg-icons';\n\nimport FeedbackForm from '../FeedbackForm';\n\nimport './SocialLinks.scss'\n\nconst SocialLinks = () => {\n  const [modalIsOpen, setModal] = useState(false);\n\n  return (\n    <>\n      <nav className=\"social-links\">\n        <a href=\"https://www.linkedin.com/in/daniil-alekseev/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faLinkedinIn} />\n        </a>\n        <a href=\"https://t.me/danil_alexeev/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faTelegramPlane} />\n        </a>\n        <span onClick={() => { setModal(!modalIsOpen) }} className=\"modal-btn\">\n          <FontAwesomeIcon icon={faEnvelope} />\n        </span>\n      </nav>\n      <a href=\"https://docs.google.com/document/d/1VyZxnp38EL_Id6tJGBAp9dLvp55sk_D7OoaHjStQGJA/edit?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"cv-download\">\n        <FontAwesomeIcon icon={faDownload} />\n        <span>Download CV</span>\n      </a>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={() => { setModal(!modalIsOpen) }}\n        contentLabel=\"Feedback modal\"\n        className=\"feedback-modal\"\n        ariaHideApp={false}\n      >\n        <span\n          className=\"close-btn\"\n          onClick={() => { setModal(!modalIsOpen) }}\n        >\n          <FontAwesomeIcon icon={faTimes} />\n        </span>\n        <FeedbackForm setModal={setModal} modalIsOpen={modalIsOpen} />\n      </Modal>\n    </>\n  )\n};\n\nexport default SocialLinks;\n","import React from 'react';\n\nimport AnimatedCore from '../components/AnimatedCore';\nimport SocialLinks from '../components/SocialLinks';\n\nconst HomePage = () => (\n  <section id=\"home-page\">\n\n    <AnimatedCore />\n\n    <SocialLinks />\n\n    <span className=\"actual-year\">{(new Date().getFullYear())}</span>\n\n  </section>\n);\n\nexport default HomePage;\n","import React from 'react';\n\nconst ContactsPage = () => (\n  <>\n    Contacts\n  </>\n);\n\nexport default ContactsPage;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useRoutes } from '../../routes';\n\nconst App = () => {\n  const routes = useRoutes();\n\n  return (\n    <Router>\n      {routes}\n    </Router>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport HomePage from './pages/Home';\nimport ContactsPage from './pages/Contacts';\n\nexport const useRoutes = () => (\n  <Switch>\n    <Route path=\"/\" exact>\n      <HomePage />\n    </Route>\n    <Route path=\"/contacts\" exact>\n      <ContactsPage />\n    </Route>\n    <Redirect to=\"/\" />\n  </Switch>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/_main.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}