{"version":3,"sources":["components/Icons/index.js","components/Icons/Icons.js","components/ModalForm/index.js","components/ModalForm/ModalForm.js","components/AnimatedCore/index.js","components/AnimatedCore/AnimatedCore.js","pages/Home.js","pages/Contacts.js","components/App/index.js","components/App/App.js","routes.js","serviceWorker.js","index.js"],"names":["Icons","setModal","modalIsOpen","className","href","target","rel","icon","faLinkedinIn","faTelegramPlane","e","preventDefault","onClick","faEnvelope","ModalForm","props","state","validated","status","handleSubmit","bind","event","form","data","FormData","xhr","XMLHttpRequest","checkValidity","stopPropagation","open","method","action","setRequestHeader","onreadystatechange","readyState","DONE","setState","setTimeout","reset","send","this","noValidate","onSubmit","type","name","id","placeholder","required","maxLength","Component","AnimatedCore","useState","isOpen","onRequestClose","contentLabel","HomePage","ContactsPage","App","routes","path","exact","Home","Contacts","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c93104a.chunk.js","sourcesContent":["import Icons from './Icons';\n\nexport default Icons;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedinIn, faTelegramPlane } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\nimport './Icons.scss';\n\nconst Icons = ({ setModal, modalIsOpen }) => (\n  <nav className=\"home-page__nav\">\n    <a href=\"https://www.linkedin.com/in/daniil-alekseev/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faLinkedinIn} />\n    </a>\n    <a href=\"https://t.me/danil_alexeev/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faTelegramPlane} />\n    </a>\n    <a href={(e) => e.preventDefault()} onClick={() => {setModal(!modalIsOpen)}} className=\"modal-btn\">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </a>\n  </nav>\n);\n\nexport default Icons;\n","import ModalForm from './ModalForm';\n\nexport default ModalForm;\n","import React, { Component } from 'react';\n\nimport './ModalForm.scss';\nimport './Modal.scss';\n\nexport default class ModalForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      validated: false,\n      status: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      xhr.open(form.method, form.action);\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState !== XMLHttpRequest.DONE) return;\n        if (xhr.status === 200) {\n          this.setState({ status: 'SUCCESS' });\n          setTimeout(() => {\n            this.setState({ status: '', validated: false });\n            form.reset();\n          }, 2000);\n        } else {\n          this.setState({ status: 'ERROR' });\n        }\n      };\n      xhr.send(data);\n    }\n    this.setState({ validated: true });\n  }\n\n  render () {\n    const { validated, status } = this.state;\n\n    return (\n      <form\n        noValidate\n        action=\"https://formspree.io/meqgdgdj\"\n        onSubmit={e => this.handleSubmit(e)}\n        method=\"POST\"\n        className={`form ${validated ? 'validated' : ''}`}\n      >\n\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            placeholder=\"Your Name\"\n            required\n          />\n          <span className=\"invalid-message\">Name is required</span>\n        </div>\n\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"Your Email\"\n            required\n          />\n          <span className=\"invalid-message\">Email is required</span>\n        </div>\n\n        <div className=\"form-group\">\n          <textarea\n            name=\"message\"\n            id=\"message\"\n            placeholder=\"Your message\"\n            maxLength=\"200\"\n            required\n          />\n          <span className=\"invalid-message\">Message is required</span>\n        </div>\n\n        <div className=\"form-group\">\n          <button type=\"submit\" className=\"btn\">\n            {status === 'SUCCESS' ? 'Thanks' : 'Submit'}\n          </button>\n        </div>\n\n      </form>\n    );\n  }\n}\n","import AnimatedCore from './AnimatedCore';\n\nexport default AnimatedCore;\n","import React, { useState } from 'react';\nimport Modal from 'react-modal';\n\nimport './AnimatedCore.scss';\n\nimport Icons from '../Icons';\nimport ModalForm from '../ModalForm';\n\nconst AnimatedCore = () => {\n  const [modalIsOpen, setModal] = useState(false);\n\n  return (\n    <>\n      <div className=\"view\">\n        <div className=\"plane main\">\n          <div className=\"circle\"/>\n          <div className=\"circle\"/>\n          <div className=\"circle\"/>\n          <div className=\"circle\"/>\n          <div className=\"circle\"/>\n          <div className=\"circle\"/>\n        </div>\n\n        <Icons setModal={setModal} modalIsOpen={modalIsOpen} />\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={() => {setModal(!modalIsOpen)}}\n        contentLabel=\"Example Modal\"\n        className=\"feedback-modal\"\n      >\n        <ModalForm />\n      </Modal>\n    </>\n  )\n};\n\nexport default AnimatedCore;\n","import React from 'react';\n\nimport AnimatedCore from '../components/AnimatedCore';\n// import MatteBlock from '../components/MatteBlock';\n\nconst HomePage = () => (\n  <section className=\"home-page\">\n\n    <AnimatedCore />\n\n    {/*<MatteBlock />*/}\n\n  </section>\n);\n\nexport default HomePage;\n","import React from 'react';\n\nconst ContactsPage = () => (\n  <>\n    Contacts\n  </>\n);\n\nexport default ContactsPage;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useRoutes } from '../../routes';\n\nconst App = () => {\n  const routes = useRoutes();\n\n  return (\n    <Router>\n      {routes}\n    </Router>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport HomePage from './pages/Home';\nimport ContactsPage from './pages/Contacts';\n\nexport const useRoutes = () => (\n  <Switch>\n    <Route path=\"/\" exact>\n      <HomePage />\n    </Route>\n    <Route path=\"/contacts\" exact>\n      <ContactsPage />\n    </Route>\n    <Redirect to=\"/\" />\n  </Switch>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}